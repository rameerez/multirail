#!/bin/sh

# Should be run as sudo

# Usage: add-new-website.sh domain -- script to set up a new site with SSL cert
# where:
#     domain website domain without subdomains (ex: example.com)

RAILS_PROJECT_PATH="./"
RAILS_PROJECT_RUBY_VERSION="2.4.0"

RAKE_SECRET="none"

program_name=$0

function usage {
    echo "usage: $program_name -d domain -i ip_address -u user -g git_repo -n app_name [-f rails_project_folder] [-v ruby_version]"
    echo "  -d domain       Set the desired domain name (ex: project.com) to which the project should be deployed"
    echo "  -i ip           IP address of the target production server (ex: 123.123.123.123)"
    echo "  -u user         Linux user on the remote machine that will be used to deploy the code (ex: rails)"
    echo "  -g git          Git repository SSH url on which the project is hosted (ex: git@github.com:user/project.git)"
    echo "  -n name         Name of your app (ex: my-awesome-project)"
    echo "  [-f folder]     Set the path where the Rails project is located. Defaults to current directory (ex: ~/git/my-project)"
    echo "  [-v version]    Set the target Ruby version for the project. Defaults to 2.4.0 (ex: 2.5.1)"
    echo "  -h              Display this help message"
    exit 1
}

while getopts ":d:i:u:g:n:f:v:h" opt; do
  case $opt in
    d)
      DOMAIN=$OPTARG
      ;;
    i)
      IP_ADDRESS=$OPTARG
      ;;
    u)
      USER_REMOTE_LINUX=$OPTARG
      ;;
    g)
      GIT_REPO_URL_SSH=$OPTARG
      ;;
    n)
      APP_NAME=$OPTARG
      ;;
    f)
      RAILS_PROJECT_PATH=$OPTARG
      ;;
    v)
      RAILS_PROJECT_RUBY_VERSION=$OPTARG
      ;;
    h)
      usage
      ;;
    \?)
      echo "Invalid option: -$OPTARG" >&2
      exit 1
      ;;
    :)
      echo "Option -$OPTARG requires an argument." >&2
      exit 1
      ;;
  esac
done

verify_current_dir_is_a_valid_rails_project () {  
  if [ -e "$RAILS_PROJECT_PATH"/Gemfile ]; then
    echo "Found Gemfile."
  else
    echo "ERROR: Couldn't find Gemfile. Is this folder a valid Rails project?"
    exit 1
  fi

  if [ -d "$RAILS_PROJECT_PATH"/app ]; then
    echo "Found app folder."
  else
    echo "ERROR: Couldn't find app folder. Is this folder a valid Rails project?"
    exit 1
  fi;

  if [ -d "$RAILS_PROJECT_PATH"/config ]; then
    echo "Found config folder."
  else
    echo "ERROR: Couldn't find config folder. Is this folder a valid Rails project?"
    exit 1
  fi

  if [ -d "$RAILS_PROJECT_PATH"/.git ]; then
    echo "Found local git repo."
  else
    echo "ERROR: Couldn't find local git repo. Is this folder a valid git repository?"
    exit 1
  fi;
}

add_capistrano_to_project () {
 gemfile_lines_to_add=`cat templates/Gemfile`

 # TODO: Use sed or something to verify this hasn't already been added if we run the command multiple times
 echo "$gemfile_lines_to_add"  >> $RAILS_PROJECT_PATH/Gemfile

 echo "Added required gems to Gemfile. Bundling..."
 ( cd $RAILS_PROJECT_PATH && bundle )

 echo "Initializing Capistrano..."
 ( cd $RAILS_PROJECT_PATH && cap install STAGES=production )
}

replace_capfile () {
  echo "Replacing Capfile..."
  sed -e "s/\$RUBY_VERSION/$RAILS_PROJECT_RUBY_VERSION/" templates/Capfile > $RAILS_PROJECT_PATH/Capfile
}

replace_deploy_rb () {
  RANDOM_DATABASE_PASSWORD=`< /dev/urandom LC_CTYPE=C tr -dc _A-Z-a-z-0-9 | head -c${1:-32};echo;`
  RAKE_SECRET="$(cd $RAILS_PROJECT_PATH && rake secret)"
  echo "Replacing deploy.rb..."
  sed -e "s/\$IP_ADDRESS/$IP_ADDRESS/g" \
      -e "s~\$GIT_REPO_URL_SSH~$GIT_REPO_URL_SSH~" \
      -e "s/\$APP_NAME/$APP_NAME/g" \
      -e "s/\$USER_REMOTE_LINUX/$USER_REMOTE_LINUX/g" \
      -e "s/\$RANDOM_DATABASE_PASSWORD/$RANDOM_DATABASE_PASSWORD/g" \
      -e "s/\$RAKE_SECRET/$RAKE_SECRET/g" \
      -e "s/\$DOMAIN/$DOMAIN/g" \
      templates/deploy.rb \
      > $RAILS_PROJECT_PATH/config/deploy.rb
}

replace_nginx_conf () {
  echo "Replacing nginx.conf..."
  sed -e "s/\$APP_NAME/$APP_NAME/g" \
      -e "s/\$USER_REMOTE_LINUX/$USER_REMOTE_LINUX/g" \
      -e "s/\$DOMAIN/$DOMAIN/g" \
      templates/nginx.conf \
      > $RAILS_PROJECT_PATH/config/nginx.conf
}

commit_and_push_all_changes () {
  ( cd $RAILS_PROJECT_PATH && git add . )
  ( cd $RAILS_PROJECT_PATH && git commit -m "[Multirail task] Add and configure Capistrano for deployment" )
  ( cd $RAILS_PROJECT_PATH && git push origin master )
}

initial_capistrano_deployment () {
  ( cd $RAILS_PROJECT_PATH && cap production deploy:initial )
}

if [ ! -z "$DOMAIN" ] && [ ! -z "$IP_ADDRESS" ] && [ ! -z "$USER_REMOTE_LINUX" ] && [ ! -z "$GIT_REPO_URL_SSH" ] && [ ! -z "$APP_NAME" ]
then

  echo "Alright! I'm going to set this Rails project named $APP_NAME to run on $DOMAIN, located at $IP_ADDRESS. The remote machine Linux user that will be used to deploy the code is $USER_REMOTE_LINUX, and I'll fetch the code from Git: $GIT_REPO_URL_SSH" >&2

  verify_current_dir_is_a_valid_rails_project
  add_capistrano_to_project
  replace_capfile
  replace_deploy_rb
  replace_nginx_conf
  commit_and_push_all_changes
  initial_capistrano_deployment  

else
    echo "ERROR: You need to provide all required details to set up the project: domain name, remote IP address, remote Linux user, Git repo URL, app name. Use -h to display help."
    exit 1
fi